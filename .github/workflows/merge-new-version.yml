# Create New Versions PR

name: Create New Version PR
on:
  workflow_call:
    inputs:
      TARGET_BRANCH:
        required: true
        type: string
      version:
        required: true
        type: string

jobs:
  version:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.TARGET_BRANCH }}
          persist-credentials: false # This is important if you have branch protection rules!
      - uses: actions/setup-node@v3
        with:
          node-version: 19

      - name: Import bot's GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GITHUB_ACTIONS_GPG_KEY }}
          PASSPHRASE: ${{ secrets.GITHUB_ACTIONS_GPG_PASS }}

      # Git configiration
      - name: Git configuration
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create Temporary Branch For Version
      - id: createTempBranch
        name: Create Temporary Branch For Version
        run: |
          BRANCH_NAME=version-update-${{ inputs.version }}
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Echo old version
      - name: Echo Old version
        run: echo "Old version is $(npm pkg get version)"

      # Version Refactoring
      - name: Version Refactoring
        run: |
          npm pkg set version=${{ inputs.version }}
          git add package.json
          git commit -m "Update version to ${{ inputs.version }}" --no-verify
          echo "Version Upgraded"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Echo old version
      - name: Echo New version
        run: echo "New version is $(npm pkg get version)"

      # Push Branch
      - name: Push Branch
        run: |
          git push --set-upstream origin "${{steps.createTempBranch.outputs.BRANCH_NAME}}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - id: createPR
        name: Create Pull Request
        run: |
          gh pr create \
          --title "Update version to ${{ inputs.version }} on ${{ inputs.TARGET_BRANCH }}" \
          --body "Update version to ${{ inputs.version }}" \
          --label "automerge" \
          --base ${{ inputs.TARGET_BRANCH }}
          sleep 5
          echo "PR_NUMBER=$(gh pr view --json 'number' --jq '.number')" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Approve PR
      - name: Approve PR
        run: gh pr review --approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Merge The PR
      - name: Approve PR
        run: gh pr merge ${{ steps.createPR.outputs.PR_NUMBER }} --merge --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
